内存模型的相关概念：
1.计算机在执行程序时，每条指令都是在CPU中执行的，而执行指令过程中，势必涉及到数据的读取和写入。由于程序运行过程中的临时数据是存放在主存（物理内存）当中的，这时就存在一个问题，由于CPU执行速度很快，而从内存读取数据和向内存写入数据的过程跟CPU执行指令的速度比起来要慢的多，因此如果任何时候对数据的操作都要通过和内存的交互来进行，会大大降低指令执行的速度。因此在CPU里面就有了高速缓存。
2.当程序在运行过程中，会将运算需要的数据从主存复制一份到CPU的高速缓存当中，那么CPU进行计算时就可以直接从它的高速缓存读取数据和向其中写入数据，当运算结束之后，再将高速缓存中的数据刷新到主存当中。



并发编程中的三个概念：
1.原子性问题：
    即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。
2.可见性问题：
    可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。
3.有序性问题：
    即程序执行的顺序按照代码的先后顺序执行。
java解决方法：
1.原子性问题：
    Java内存模型只保证了基本读取和赋值是原子性操作，如果要实现更大范围操作的原子性，可以通过synchronized和Lock来实现。
2.可见性问题：
    Java提供了volatile关键字来保证可见性。




java线程锁
1.synchronized:
    1.1不需要手动释放
    1.2不能中断等待
    1.3资源竞争不激烈是用这个
2.lock:
    2.1可以读写区分
    2.2可以获取当前是否锁了
    2.3需要手动释放
    2.4可以中断等待
    2.5资源竞争激烈使用这个
3.atomic
    3.1竞争激烈更胜于lock


